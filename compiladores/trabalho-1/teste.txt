  def create_matrix
    max_row = @values.map { |item| item[:row] }.compact.max || 0
    max_col = @values.map { |item| item[:col] }.compact.max || 0

    matrix = Array.new(max_row + 1) { Array.new(max_col + 1) }

    @values.each do |mapping|
      row = mapping[:row]
      col = mapping[:col]
      value = mapping[:value]

      next if row.nil? || col.nil?

      if matrix[row][col].nil?
        matrix[row][col] = value
      else
        matrix[row][col] ||= []
        matrix[row][col] << value
      end
    end

    matrix
  end

  def teste
    @ci = nda_rows.size
    new_mappings = {}

    # Pega mapeamentos com estado inicial
    initial_values = compact_nda_mappings.select { |nda_mapping| nda_mapping[:row].zero? }

    # Pega demais elementos
    initial_values.each do |mapping|
      unless mapping[:value].is_a?(Array)
        new_mappings[[mapping[:row], mapping[:col]]] = mapping

        values = compact_nda_mappings.select do |nda_mapping|
          nda_mapping[:row] == mapping[:value] &&
            new_mappings[[nda_mapping[:row], nda_mapping[:col]]].nil?
        end

        values.each do |value|
          initial_values << value
          new_mappings[[value[:row], value[:col]]] = value
        end

      else
        new_mappings[[mapping[:row], mapping[:col]]] = {
          row: mapping[:row],
          col: mapping[:col],
          value: @ci
        }

        values = compact_nda_mappings.select do |nda_mapping|
          mapping[:value].include?(nda_mapping[:row]) &&
            new_mappings[[nda_mapping[:row], nda_mapping[:col]]].nil?
        end

        values.each do |value|
          new_value = {
            row: @ci,
            col: value[:col],
            value: value[:value]
          }
          initial_values << new_value
          new_mappings[[@ci, value[:col]]] = new_value
        end

        @ci += 1
      end
    end

    new_mappings.values
  end